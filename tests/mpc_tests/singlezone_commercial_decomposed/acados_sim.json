{
    "acados_include_path": "/opt/acados/include",
    "acados_lib_path": "/opt/acados/lib",
    "code_export_directory": "/home/marius/python/ocp/tests/mpc_tests/singlezone_commercial/c_generated_code",
    "cython_include_dirs": [
        "/usr/local/lib/python3.10/site-packages/numpy/core/include",
        "/usr/local/include/python3.10"
    ],
    "dims": {
        "np": 12,
        "nu": 10,
        "nx": 3,
        "nz": 3
    },
    "model": {
        "con_h_expr": null,
        "con_h_expr_0": null,
        "con_h_expr_e": null,
        "con_phi_expr": null,
        "con_phi_expr_0": null,
        "con_phi_expr_e": null,
        "con_r_expr": null,
        "con_r_expr_0": null,
        "con_r_expr_e": null,
        "con_r_in_phi": null,
        "con_r_in_phi_0": null,
        "con_r_in_phi_e": null,
        "cost_conl_custom_outer_hess": null,
        "cost_conl_custom_outer_hess_0": null,
        "cost_conl_custom_outer_hess_e": null,
        "cost_expr_ext_cost": null,
        "cost_expr_ext_cost_0": null,
        "cost_expr_ext_cost_custom_hess": null,
        "cost_expr_ext_cost_custom_hess_0": null,
        "cost_expr_ext_cost_custom_hess_e": null,
        "cost_expr_ext_cost_e": null,
        "cost_psi_expr": null,
        "cost_psi_expr_0": null,
        "cost_psi_expr_e": null,
        "cost_r_in_psi_expr": null,
        "cost_r_in_psi_expr_0": null,
        "cost_r_in_psi_expr_e": null,
        "cost_y_expr": null,
        "cost_y_expr_0": null,
        "cost_y_expr_e": null,
        "disc_dyn_expr": null,
        "dyn_disc_fun": null,
        "dyn_disc_fun_jac": null,
        "dyn_disc_fun_jac_hess": null,
        "dyn_ext_fun_type": "casadi",
        "dyn_generic_source": null,
        "f_expl_expr": "vertcat((((((((Te-Ti)/(Rie*Ci))+((Ta-Ti)/(Ria*Ci)))+(Ai*(phi_s/Ci)))+(rho_int*(((int_con+int_lat)+int_rad)/Ci)))+(Pvent_to_env/Ci))+(Prad/Ci)), (((Ti-Te)/(Rie*Ce))+((Ta-Te)/(Rea*Ce))), (((n_air*c1)*(CO2_out-CO2_in))+(c_occ*n_occ)), (n_air-((n_mech+n_nat)+n_inf)), (n_mech-ahu_reaFloExtAir), (n_nat-(ahu_reaFloSupAir-ahu_reaFloExtAir)))",
        "f_impl_expr": "(xdot-vertcat((((((((Te-Ti)/(Rie*Ci))+((Ta-Ti)/(Ria*Ci)))+(Ai*(phi_s/Ci)))+(rho_int*(((int_con+int_lat)+int_rad)/Ci)))+(Pvent_to_env/Ci))+(Prad/Ci)), (((Ti-Te)/(Rie*Ce))+((Ta-Te)/(Rea*Ce))), (((n_air*c1)*(CO2_out-CO2_in))+(c_occ*n_occ)), (n_air-((n_mech+n_nat)+n_inf)), (n_mech-ahu_reaFloExtAir), (n_nat-(ahu_reaFloSupAir-ahu_reaFloExtAir))))",
        "gnsf": {
            "nontrivial_f_LO": 1,
            "purely_linear": 0
        },
        "name": "test",
        "nu_original": null,
        "p": "vertcat(Rie, Rea, Ria, UA_vent_air, rho_int, Ci, Ce, Ai, c1, CO2_out, n_inf, c_occ)",
        "p_names": [
            "Rie",
            "Rea",
            "Ria",
            "UA_vent_air",
            "rho_int",
            "Ci",
            "Ce",
            "Ai",
            "c1",
            "CO2_out",
            "n_inf",
            "c_occ"
        ],
        "t": [],
        "u": "vertcat(Prad, Pvent_to_env, ahu_reaFloSupAir, ahu_reaFloExtAir, n_occ, Ta, phi_s, int_con, int_lat, int_rad)",
        "u_names": [
            "Prad",
            "Pvent_to_env",
            "ahu_reaFloSupAir",
            "ahu_reaFloExtAir",
            "n_occ",
            "Ta",
            "phi_s",
            "int_con",
            "int_lat",
            "int_rad"
        ],
        "x": "vertcat(Ti, Te, CO2_in)",
        "x_names": [
            "Ti",
            "Te",
            "CO2_in"
        ],
        "xdot": "xdot",
        "z": "vertcat(n_air, n_mech, n_nat)",
        "z_names": [
            "n_air",
            "n_mech",
            "n_nat"
        ]
    },
    "parameter_values": [
        7.594529005016671e-05,
        0.017578420105668,
        0.0001877220552615,
        14389.763498431636,
        0.25,
        133495362.5301808,
        273209802647.43,
        134.42385429726312,
        2.843954036009952e-05,
        418.9621944677784,
        1.2934518580497008,
        0.000598783123971
    ],
    "problem_class": "SIM",
    "shared_lib_ext": ".so",
    "solver_options": {
        "Tsim": 900,
        "collocation_type": "GAUSS_LEGENDRE",
        "ext_fun_compile_flags": "-O2",
        "integrator_type": "IRK",
        "output_z": true,
        "sens_adj": false,
        "sens_algebraic": false,
        "sens_forw": false,
        "sens_hess": false,
        "sim_method_jac_reuse": 0,
        "sim_method_newton_iter": 3,
        "sim_method_newton_tol": 1e-06,
        "sim_method_num_stages": 1,
        "sim_method_num_steps": 1
    }
}