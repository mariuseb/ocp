{
    "model": {
        "ode": {
            "Ti": "(Te - Ti)/(Rie_TVP*Ci_TVP) + phi_h/Ci_TVP + Ai*(phi_s/Ci_TVP) + (1/Ci_TVP)*alpha_vent*V_sup_air*(T_sup_air - Ti) + (T_321  - Ti)/(R_321_i*Ci_TVP) + (T_320  - Ti)/(R_320_i*Ci_TVP) + (T_121  - Ti)/(R_121_i*Ci_TVP)",
            "Te": "(Ti - Te)/(Rie_TVP*Ce_TVP) + (Ta - Te)/(Rea_TVP*Ce_TVP) + Ae*(phi_s/Ce_TVP) + (T_121  - Te)/(R_121_e*Ce_TVP) + (T_321  - Te)/(R_321_e*Ce_TVP) + (T_320  - Te)/(R_320_e*Ce_TVP)"
        },
        "alg": {
            "Rie_TVP": "Rie + Rie_a*ca.if_else(V_sup_air > 10, 1, 0) - Rie_TVP",
            "Rea_TVP": "Rea + Rea_a*ca.if_else(V_sup_air > 10, 1, 0) - Rea_TVP",
            "Ci_TVP": "Ci + Ci_a*ca.if_else(V_sup_air > 10, 1, 0) - Ci_TVP",
            "Ce_TVP": "Ce + Ce_a*ca.if_else(V_sup_air > 10, 1, 0) - Ce_TVP"
        },
        "w": {
            "v1": "Ti - y1"
        },
        "p": [
            "Rie",
            "Rie_a",
            "Rea",
            "Rea_a",
            "Ci",
            "Ci_a",
            "Ce",
            "Ce_a",
            "Ai",
            "Ae",
            "alpha_vent",
            "R_121_e",
            "R_321_e",
            "R_320_e",
            "R_121_i",
            "R_321_i",
            "R_320_i"
        ],
        "u": [
            "phi_h",
            "phi_s",
            "Ta",
            "V_sup_air",
            "T_sup_air",
            "vent_on",
            "weeknd",
            "T_207",
            "T_121",
            "T_321",
            "T_320"
        ],
        "z": [
            "Rie_TVP",
            "Rea_TVP",
            "Ci_TVP",
            "Ce_TVP"
        ],
        "x": [
            "Ti",
            "Te"
        ],
        "y": [
            ["y1", "Ti"]
        ]
    },
    "ocp": {
        "h": 
        [
            "0 <= 100*Rie - Rea",
            "0 <= Rea - 2*Rie"
        ]
    },
    "bounds": {
        "z": {
            "lbz": [1E-5,1E-5,1E5,1E5],
            "ubz": [1,1,1E9,1E9]
        }
    },
    "objective": "dot(v1, v1)@R[0,0]",
    "method": "multiple_shooting",
    "integrator": 
        {
        "name": "IRK",
        "method": "legendre",
        "degree": 3,
        "n_steps": 1
        }
    ,
    "solver": "",
    "opt": {
        "verbose": false,
        "ipopt.linear_solver": "ma57",
        "ipopt.ma57_pre_alloc": 10,
        "ipopt.ma57_automatic_scaling" : "yes"
    },
    "codegen": true
}