{
    "model": {
        "ode": {
            "Tret": "(Th - Tret)/(Rrh*Cret) + (Ti + deltaT_ret - Tret)/(Rret*Cret)",
            "Tsup": "((Tset_sup - Tsup)/(Rsup*Csup) + (Th - Tsup)/(Rsh*Csup))*m_flow_bool + ((Tset_sup - Tsup)/(Rsup_hold*Csup_hold) + (Th - Tsup)/(Rsh*Csup_hold))*(1-m_flow_bool)",
            "Th": "Prad/Ch + ((Ti - deltaT_h) - Th)/(Rih*Ch)",
            "u_val": "(u_val_set - u_val)*(1/tau)"
        },
        "alg": {
            "Tset_sup": "Tset_sup - (T_set_sup_b - T_set_sup_a*(Ta - Ta_dim))*m_flow_bool - (Ti - deltaT_sup)*(1 - m_flow_bool)",
            "Prad": "Prad - m_flow*cp_water*(Tsup - Tret)",
            "m_flow": "m_flow - m_flow_nom*u_val"
        },
        "w": {
            "v2": "Tret - y2",
            "v3": "Tsup - y3",
            "v4": "Prad - y4",
            "v5": "m_flow - y5"
        },
        "p": [
            "Ta_dim",
            "T_set_sup_b",
            "T_set_sup_a",
            "Rsup",
            "Csup",
            "Rih",
            "Rrh",
            "Rsh",
            "Rir",
            "Ch",
            "Rsup_hold",
            "Csup_hold",
            "Rret",
            "Cret",
            "deltaT_h",
            "deltaT_sup",
            "deltaT_ret",
            "tau",
            "m_flow_nom",
            "cp_water"
        ],
        "u": [
            "Ta",
            "Ti",
            "m_flow_bool",
            "flow_weight",
            "delta_m_flow",
            "u_val_set"
        ],
        "z": [
            "Tset_sup",
            "Prad",
            "m_flow"
        ],
        "x": [
          "Tret",
          "Tsup",
          "Th",
          "u_val"
        ],
        "y": [
            ["y2", "Tret"],
            ["y3", "Tsup"],
            ["y4", "Prad"],
            ["y5", "m_flow"]
        ]
    },
    "bounds": {
        "z": {
            "lbz": [280,-500,-1],
            "ubz": [320,5000,1]
        },
        "x": {
            "lbx": [280,280,280,-1],
            "ubx": [320,320,320,1]
        }
    },
    "objective": "dot(v2, v2)@R[0,0] + dot(v3, v3)@R[1,1] + dot(v4, v4)@R[2,2] + dot(v5, v5)@R[3,3]",
    "method": "multiple_shooting",
    "integrator": 
        {
        "name": "IRK",
        "method": "legendre",
        "degree": 3,
        "n_steps": 1
        }
    ,
    "solver": "",
    "opt": {
        "verbose": true,
        "ipopt.linear_solver": "ma57",
        "ipopt.ma57_pre_alloc": 10,
        "ipopt.ma57_automatic_scaling" : "yes",
        "ipopt.hessian_approximation": "exact"
    },
    "codegen": false
}
