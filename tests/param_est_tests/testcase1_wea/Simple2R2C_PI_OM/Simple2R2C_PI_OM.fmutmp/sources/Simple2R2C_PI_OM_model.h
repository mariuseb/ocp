/* Simulation code for Simple2R2C_PI_OM generated by the OpenModelica Compiler v1.21.0-2-g0bc3d29bd9-cmake. */
#if !defined(Simple2R2C_PI_OM__MODEL_H)
#define Simple2R2C_PI_OM__MODEL_H

#include "openmodelica.h"
#include "openmodelica_func.h"
#include "simulation_data.h"
#include "simulation/simulation_info_json.h"
#include "simulation/simulation_runtime.h"
#include "util/omc_error.h"
#include "util/parallel_helper.h"
#include "simulation/jacobian_util.h"
#include "simulation/simulation_omc_assert.h"
#include "simulation/solver/model_help.h"
#include "simulation/solver/delay.h"
#include "simulation/solver/linearSystem.h"
#include "simulation/solver/nonlinearSystem.h"
#include "simulation/solver/mixedSystem.h"
#include "simulation/solver/spatialDistribution.h"

#if defined(__cplusplus)
extern "C" {
#endif

#include <string.h>

#include "Simple2R2C_PI_OM_functions.h"

#define Buildings_BoundaryConditions_WeatherData_BaseClasses_getAltitudeLocationTMY3_index 0
#define Buildings_BoundaryConditions_WeatherData_BaseClasses_getHeaderElementTMY3_index 1
#define Buildings_BoundaryConditions_WeatherData_BaseClasses_getLastHeaderElementTMY3_index 2
#define Buildings_BoundaryConditions_WeatherData_BaseClasses_getLatitudeTMY3_index 3
#define Buildings_BoundaryConditions_WeatherData_BaseClasses_getLongitudeTMY3_index 4
#define Buildings_BoundaryConditions_WeatherData_BaseClasses_getTimeSpanTMY3_index 5
#define Buildings_BoundaryConditions_WeatherData_BaseClasses_getTimeZoneTMY3_index 6
#define Modelica_Blocks_Tables_Internal_getNextTimeEvent_index 7
#define Modelica_Blocks_Tables_Internal_getTable1DAbscissaUmax_index 8
#define Modelica_Blocks_Tables_Internal_getTable1DAbscissaUmin_index 9
#define Modelica_Blocks_Tables_Internal_getTable1DValue_index 10
#define Modelica_Blocks_Tables_Internal_getTimeTableTmax_index 11
#define Modelica_Blocks_Tables_Internal_getTimeTableTmin_index 12
#define Modelica_Blocks_Tables_Internal_getTimeTableValueNoDer_index 13
#define Modelica_Blocks_Types_ExternalCombiTable1D_constructor_index 14
#define Modelica_Blocks_Types_ExternalCombiTable1D_destructor_index 15
#define Modelica_Blocks_Types_ExternalCombiTimeTable_constructor_index 16
#define Modelica_Blocks_Types_ExternalCombiTimeTable_destructor_index 17
#define Modelica_Utilities_Streams_readLine_index 18
#define Modelica_Utilities_Strings_compare_index 19
#define Modelica_Utilities_Strings_find_index 20
#define Modelica_Utilities_Strings_findLast_index 21
#define Modelica_Utilities_Strings_isEqual_index 22
#define Modelica_Utilities_Strings_length_index 23
#define Modelica_Utilities_Strings_substring_index 24
#define Modelica_Utilities_Strings_Advanced_scanReal_index 25

extern void Simple2R2C_PI_OM_callExternalObjectDestructors(DATA *_data, threadData_t *threadData);
#if !defined(OMC_NUM_NONLINEAR_SYSTEMS) || OMC_NUM_NONLINEAR_SYSTEMS>0
#endif
#if !defined(OMC_NUM_LINEAR_SYSTEMS) || OMC_NUM_LINEAR_SYSTEMS>0
#endif
#if !defined(OMC_NUM_MIXED_SYSTEMS) || OMC_NUM_MIXED_SYSTEMS>0
#endif
#if !defined(OMC_NO_STATESELECTION)
extern void Simple2R2C_PI_OM_initializeStateSets(int nStateSets, STATE_SET_DATA* statesetData, DATA *data);
#endif
extern int Simple2R2C_PI_OM_functionAlgebraics(DATA *data, threadData_t *threadData);
extern int Simple2R2C_PI_OM_function_storeDelayed(DATA *data, threadData_t *threadData);
extern int Simple2R2C_PI_OM_function_storeSpatialDistribution(DATA *data, threadData_t *threadData);
extern int Simple2R2C_PI_OM_function_initSpatialDistribution(DATA *data, threadData_t *threadData);
extern int Simple2R2C_PI_OM_updateBoundVariableAttributes(DATA *data, threadData_t *threadData);
extern int Simple2R2C_PI_OM_functionInitialEquations(DATA *data, threadData_t *threadData);
extern int Simple2R2C_PI_OM_functionInitialEquations_lambda0(DATA *data, threadData_t *threadData);
extern int Simple2R2C_PI_OM_functionRemovedInitialEquations(DATA *data, threadData_t *threadData);
extern int Simple2R2C_PI_OM_updateBoundParameters(DATA *data, threadData_t *threadData);
extern int Simple2R2C_PI_OM_checkForAsserts(DATA *data, threadData_t *threadData);
extern int Simple2R2C_PI_OM_function_ZeroCrossingsEquations(DATA *data, threadData_t *threadData);
extern int Simple2R2C_PI_OM_function_ZeroCrossings(DATA *data, threadData_t *threadData, double* gout);
extern int Simple2R2C_PI_OM_function_updateRelations(DATA *data, threadData_t *threadData, int evalZeroCross);
extern const char* Simple2R2C_PI_OM_zeroCrossingDescription(int i, int **out_EquationIndexes);
extern const char* Simple2R2C_PI_OM_relationDescription(int i);
extern void Simple2R2C_PI_OM_function_initSample(DATA *data, threadData_t *threadData);
extern int Simple2R2C_PI_OM_initialAnalyticJacobianG(DATA* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Simple2R2C_PI_OM_initialAnalyticJacobianA(DATA* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Simple2R2C_PI_OM_initialAnalyticJacobianB(DATA* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Simple2R2C_PI_OM_initialAnalyticJacobianC(DATA* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Simple2R2C_PI_OM_initialAnalyticJacobianD(DATA* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Simple2R2C_PI_OM_initialAnalyticJacobianF(DATA* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Simple2R2C_PI_OM_initialAnalyticJacobianH(DATA* data, threadData_t *threadData, ANALYTIC_JACOBIAN *jacobian);
extern int Simple2R2C_PI_OM_functionJacG_column(DATA* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Simple2R2C_PI_OM_functionJacA_column(DATA* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Simple2R2C_PI_OM_functionJacB_column(DATA* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Simple2R2C_PI_OM_functionJacC_column(DATA* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Simple2R2C_PI_OM_functionJacD_column(DATA* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Simple2R2C_PI_OM_functionJacF_column(DATA* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern int Simple2R2C_PI_OM_functionJacH_column(DATA* data, threadData_t *threadData, ANALYTIC_JACOBIAN *thisJacobian, ANALYTIC_JACOBIAN *parentJacobian);
extern const char* Simple2R2C_PI_OM_linear_model_frame(void);
extern const char* Simple2R2C_PI_OM_linear_model_datarecovery_frame(void);
extern int Simple2R2C_PI_OM_mayer(DATA* data, modelica_real** res, short *);
extern int Simple2R2C_PI_OM_lagrange(DATA* data, modelica_real** res, short *, short *);
extern int Simple2R2C_PI_OM_pickUpBoundsForInputsInOptimization(DATA* data, modelica_real* min, modelica_real* max, modelica_real*nominal, modelica_boolean *useNominal, char ** name, modelica_real * start, modelica_real * startTimeOpt);
extern int Simple2R2C_PI_OM_setInputData(DATA *data, const modelica_boolean file);
extern int Simple2R2C_PI_OM_getTimeGrid(DATA *data, modelica_integer * nsi, modelica_real**t);
extern void Simple2R2C_PI_OM_function_initSynchronous(DATA * data, threadData_t *threadData);
extern void Simple2R2C_PI_OM_function_updateSynchronous(DATA * data, threadData_t *threadData, long base_idx);
extern int Simple2R2C_PI_OM_function_equationsSynchronous(DATA * data, threadData_t *threadData, long base_idx, long sub_idx);
extern void Simple2R2C_PI_OM_read_input_fmu(MODEL_DATA* modelData, SIMULATION_INFO* simulationData);
extern void Simple2R2C_PI_OM_function_savePreSynchronous(DATA *data, threadData_t *threadData);
extern int Simple2R2C_PI_OM_inputNames(DATA* data, char ** names);
extern int Simple2R2C_PI_OM_dataReconciliationInputNames(DATA* data, char ** names);
extern int Simple2R2C_PI_OM_dataReconciliationUnmeasuredVariables(DATA* data, char ** names);
extern int Simple2R2C_PI_OM_initializeDAEmodeData(DATA *data, DAEMODE_DATA*);
extern int Simple2R2C_PI_OM_functionLocalKnownVars(DATA* data, threadData_t* threadData);
extern int Simple2R2C_PI_OM_symbolicInlineSystem(DATA* data, threadData_t* threadData);

#include "Simple2R2C_PI_OM_literals.h"




#if defined(HPCOM) && !defined(_OPENMP)
  #error "HPCOM requires OpenMP or the results are wrong"
#endif
#if defined(_OPENMP)
  #include <omp.h>
#else
  /* dummy omp defines */
  #define omp_get_max_threads() 1
#endif

#if defined(__cplusplus)
}
#endif

#endif /* !defined(Simple2R2C_PI_OM__MODEL_H) */


